
const KEY_SIZE = 16; 
const BLOCK_SIZE = 16; 

const sbox = [
    0x63, 0x7c, 0x77, 0x7b, 0xf2, 0x6b, 0x6f, 0xc5, 0x30, 0x01, 0x67, 0x2b, 0xfe, 0xd7, 0xab, 0x76,
    0xca, 0x82, 0xc9, 0x7d, 0xfa, 0x59, 0x47, 0xf0, 0xad, 0xd4, 0xa2, 0xaf, 0x9c, 0xa4, 0x72, 0xc0,
    0xb7, 0xfd, 0x93, 0x26, 0x36, 0x3f, 0xf7, 0xcc, 0x34, 0xa5, 0xe5, 0xf1, 0x71, 0xd8, 0x31, 0x15,
    0x04, 0xc7, 0x23, 0xc3, 0x18, 0x96, 0x05, 0x9a, 0x07, 0x12, 0x80, 0xe2, 0xeb, 0x27, 0xb2, 0x75,
    0x09, 0x83, 0x2c, 0x1a, 0x1b, 0x6e, 0x5a, 0xa0, 0x52, 0x3b, 0xd6, 0xb3, 0x29, 0xe3, 0x2f, 0x84,
    0x53, 0xd1, 0x00, 0xed, 0x20, 0xfc, 0xb1, 0x5b, 0x6a, 0xcb, 0xbe, 0x39, 0x4a, 0x4c, 0x58, 0xcf,
    0xd0, 0xef, 0xaa, 0xfb, 0x43, 0x4d, 0x33, 0x85, 0x45, 0xf9, 0x02, 0x7f, 0x50, 0x3c, 0x9f, 0xa8,
    0x51, 0xa3, 0x40, 0x8f, 0x92, 0x9d, 0x38, 0xf5, 0xbc, 0xb6, 0xda, 0x21, 0x10, 0xff, 0xf3, 0xd2,
    0xcd, 0x0c, 0x13, 0xec, 0x5f, 0x97, 0x44, 0x17, 0xc4, 0xa7, 0x7e, 0x3d, 0x64, 0x5d, 0x19, 0x73,
    0x60, 0x81, 0x4f, 0xdc, 0x22, 0x2a, 0x90, 0x88, 0x46, 0xee, 0xb8, 0x14, 0xde, 0x5e, 0x0b, 0xdb,
    0xe0, 0x32, 0x3a, 0x0a, 0x49, 0x06, 0x24, 0x5c, 0xc2, 0xd3, 0xac, 0x62, 0x91, 0x95, 0xe4, 0x79,
    0xe7, 0xc8, 0x37, 0x6d, 0x8d, 0xd5, 0x4e, 0xa9, 0x6c, 0x56, 0xf4, 0xea, 0x65, 0x7a, 0xae, 0x08,
    0xba, 0x78, 0x25, 0x2e, 0x1c, 0xa6, 0xb4, 0xc6, 0xe8, 0xdd, 0x74, 0x1f, 0x4b, 0xbd, 0x8b, 0x8a,
    0x70, 0x3e, 0xb5, 0x66, 0x48, 0x03, 0xf6, 0x0e, 0x61, 0x35, 0x57, 0xb9, 0x86, 0xc1, 0x1d, 0x9e,
    0xe1, 0xf8, 0x98, 0x11, 0x69, 0xd9, 0x8e, 0x94, 0x9b, 0x1e, 0x87, 0xe9, 0xce, 0x55, 0x28, 0xdf,
    0x8c, 0xa1, 0x89, 0x0d, 0xbf, 0xe6, 0x42, 0x68, 0x41, 0x99, 0x2d, 0x0f, 0xb0, 0x54, 0xbb, 0x16
];


const rsbox = [
    0x52, 0x09, 0x6a, 0xd5, 0x30, 0x36, 0xa5, 0x38, 0xbf, 0x40, 0xa3, 0x9e, 0x81, 0xf3, 0xd7, 0xfb,
    0x7c, 0xe3, 0x39, 0x82, 0x9b, 0x2f, 0xff, 0x87, 0x34, 0x8e, 0x43, 0x44, 0xc4, 0xde, 0xe9, 0xcb,
    0x54, 0x7b, 0x94, 0x32, 0xa6, 0xc2, 0x23, 0x3d, 0xee, 0x4c, 0x95, 0x0b, 0x42, 0xfa, 0xc3, 0x4e,
    0x08, 0x2e, 0xa1, 0x66, 0x28, 0xd9, 0x24, 0xb2, 0x76, 0x5b, 0xa2, 0x49, 0x6d, 0x8b, 0xd1, 0x25,
    0x72, 0xf8, 0xf6, 0x64, 0x86, 0x68, 0x98, 0x16, 0xd4, 0xa4, 0x5c, 0xcc, 0x5d, 0x65, 0xb6, 0x92,
    0x6c, 0x70, 0x48, 0x50, 0xfd, 0xed, 0xb9, 0xda, 0x5e, 0x15, 0x46, 0x57, 0xa7, 0x8d, 0x9d, 0x84,
    0x90, 0xd8, 0xab, 0x00, 0x8c, 0xbc, 0xd3, 0x0a, 0xf7, 0xe4, 0x58, 0x05, 0xb8, 0xb3, 0x45, 0x06,
    0xd0, 0x2c, 0x1e, 0x8f, 0xca, 0x3f, 0x0f, 0x02, 0xc1, 0xaf, 0xbd, 0x03, 0x01, 0x13, 0x8a, 0x6b,
    0x3a, 0x91, 0x11, 0x41, 0x4f, 0x67, 0xdc, 0xea, 0x97, 0xf2, 0xcf, 0xce, 0xf0, 0xb4, 0xe6, 0x73,
    0x96, 0xac, 0x74, 0x22, 0xe7, 0xad, 0x35, 0x85, 0xe2, 0xf9, 0x37, 0xe8, 0x1c, 0x75, 0xdf, 0x6e,
    0x47, 0xf1, 0x1a, 0x71, 0x1d, 0x29, 0xc5, 0x89, 0x6f, 0xb7, 0x62, 0x0e, 0xaa, 0x18, 0xbe, 0x1b,
    0xfc, 0x56, 0x3e, 0x4b, 0xc6, 0xd2, 0x79, 0x20, 0x9a, 0xdb, 0xc0, 0xfe, 0x78, 0xcd, 0x5a, 0xf4,
    0x1f, 0xdd, 0xa8, 0x33, 0x88, 0x07, 0xc7, 0x31, 0xb1, 0x12, 0x10, 0x59, 0x27, 0x80, 0xec, 0x5f,
    0x60, 0x51, 0x7f, 0xa9, 0x19, 0xb5, 0x4a, 0x0d, 0x2d, 0xe5, 0x7a, 0x9f, 0x93, 0xc9, 0x9c, 0xef,
    0xa0, 0xe0, 0x3b, 0x4d, 0xae, 0x2a, 0xf5, 0xb0, 0xc8, 0xeb, 0xbb, 0x3c, 0x83, 0x53, 0x99, 0x61,
    0x17, 0x2b, 0x04, 0x7e, 0xba, 0x77, 0xd6, 0x26, 0xe1, 0x69, 0x14, 0x63, 0x55, 0x21, 0x0c, 0x7d
];


const rcon = [
    0x00, 0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80, 0x1b, 0x36
];



function hexToUint8Array(hex) {
    const bytes = new Uint8Array(hex.length / 2);
    for (let i = 0; i < hex.length; i += 2) {
        bytes[i / 2] = parseInt(hex.substr(i, 2), 16);
    }
    return bytes;
}

function uint8ArrayToHex(array) {
    return Array.from(array, byte => byte.toString(16).padStart(2, '0')).join('');
}


function keyExpansion(key) {
    const expandedKey = new Uint8Array(176);
    expandedKey.set(key);

    for (let i = 16; i < 176; i += 4) {
        let temp = expandedKey.slice(i - 4, i);
        if (i % 16 === 0) {
            temp = [
                sbox[temp[1]] ^ rcon[i / 16],
                sbox[temp[2]],
                sbox[temp[3]],
                sbox[temp[0]]
            ];
        }
        for (let j = 0; j < 4; j++) {
            expandedKey[i + j] = expandedKey[i + j - 16] ^ temp[j];
        }
    }

    return expandedKey;
}


function addRoundKey(state, roundKey) {
    for (let i = 0; i < 16; i++) {
        state[i] ^= roundKey[i];
    }
}

function subBytes(state) {
    for (let i = 0; i < 16; i++) {
        state[i] = sbox[state[i]];
    }
}

function shiftRows(state) {

    let temp = state[1];
    state[1] = state[5];
    state[5] = state[9];
    state[9] = state[13];
    state[13] = temp;


    temp = state[2];
    state[2] = state[10];
    state[10] = temp;
    temp = state[6];
    state[6] = state[14];
    state[14] = temp;


    temp = state[15];
    state[15] = state[11];
    state[11] = state[7];
    state[7] = state[3];
    state[3] = temp;
}

function mixColumns(state) {
    for (let i = 0; i < 16; i += 4) {
        const s0 = state[i];
        const s1 = state[i + 1];
        const s2 = state[i + 2];
        const s3 = state[i + 3];

        state[i] = multiply(0x02, s0) ^ multiply(0x03, s1) ^ s2 ^ s3;
        state[i + 1] = s0 ^ multiply(0x02, s1) ^ multiply(0x03, s2) ^ s3;
        state[i + 2] = s0 ^ s1 ^ multiply(0x02, s2) ^ multiply(0x03, s3);
        state[i + 3] = multiply(0x03, s0) ^ s1 ^ s2 ^ multiply(0x02, s3);
    }
}

function multiply(a, b) {
    let result = 0;
    while (b > 0) {
        if (b & 1) {
            result ^= a;
        }
        a = a << 1;
        if (a & 0x100) {
            a ^= 0x11b;
        }
        b = b >> 1;
    }
    return result;
}

function invSubBytes(state) {
    for (let i = 0; i < 16; i++) {
        state[i] = rsbox[state[i]];
    }
}

function invShiftRows(state) {

    let temp = state[13];
    state[13] = state[9];
    state[9] = state[5];
    state[5] = state[1];
    state[1] = temp;


    temp = state[2];
    state[2] = state[10];
    state[10] = temp;
    temp = state[6];
    state[6] = state[14];
    state[14] = temp;


    temp = state[3];
    state[3] = state[7];
    state[7] = state[11];
    state[11] = state[15];
    state[15] = temp;
}
function invMixColumns(state) {
    for (let i = 0; i < 16; i += 4) {
        const s0 = state[i];
        const s1 = state[i + 1];
        const s2 = state[i + 2];
        const s3 = state[i + 3];

        state[i] = multiply(0x0e, s0) ^ multiply(0x0b, s1) ^ multiply(0x0d, s2) ^ multiply(0x09, s3);
        state[i + 1] = multiply(0x09, s0) ^ multiply(0x0e, s1) ^ multiply(0x0b, s2) ^ multiply(0x0d, s3);
        state[i + 2] = multiply(0x0d, s0) ^ multiply(0x09, s1) ^ multiply(0x0e, s2) ^ multiply(0x0b, s3);
        state[i + 3] = multiply(0x0b, s0) ^ multiply(0x0d, s1) ^ multiply(0x09, s2) ^ multiply(0x0e, s3);
    }
}


function aesEncryptBlock(input, key) {
    const state = new Uint8Array(input);
    const expandedKey = keyExpansion(key);

    addRoundKey(state, expandedKey.slice(0, 16));

    for (let round = 1; round < 10; round++) {
        subBytes(state);
        shiftRows(state);
        mixColumns(state);
        addRoundKey(state, expandedKey.slice(round * 16, (round + 1) * 16));
    }

    subBytes(state);
    shiftRows(state);
    addRoundKey(state, expandedKey.slice(160, 176));

    return state;
}


function aesDecryptBlock(input, key) {
    const state = new Uint8Array(input);
    const expandedKey = keyExpansion(key);

    addRoundKey(state, expandedKey.slice(160, 176));

    for (let round = 9; round > 0; round--) {
        invShiftRows(state);
        invSubBytes(state);
        addRoundKey(state, expandedKey.slice(round * 16, (round + 1) * 16));
        invMixColumns(state);
    }

    invShiftRows(state);
    invSubBytes(state);
    addRoundKey(state, expandedKey.slice(0, 16));

    return state;
}


function aesCbcEncrypt(key, iv, plaintext) {
    const ciphertext = new Uint8Array(plaintext.length);
    let previousBlock = iv;

    for (let i = 0; i < plaintext.length; i += 16) {
        const block = plaintext.slice(i, i + 16);
        for (let j = 0; j < 16; j++) {
            block[j] ^= previousBlock[j];
        }
        const encryptedBlock = aesEncryptBlock(block, key);
        ciphertext.set(encryptedBlock, i);
        previousBlock = encryptedBlock;
    }

    return ciphertext;
}


function aesCbcDecrypt(key, iv, ciphertext) {
    const plaintext = new Uint8Array(ciphertext.length);
    let previousBlock = iv;

    for (let i = 0; i < ciphertext.length; i += 16) {
        const block = ciphertext.slice(i, i + 16);
        const decryptedBlock = aesDecryptBlock(block, key);
        for (let j = 0; j < 16; j++) {
            decryptedBlock[j] ^= previousBlock[j];
        }
        plaintext.set(decryptedBlock, i);
        previousBlock = block;
    }

    return plaintext;
}


const key = hexToUint8Array('000102030405060708090a0b0c0d0e0f');
const iv = hexToUint8Array('101112131415161718191a1b1c1d1e1f');

function pad(data) {
    const paddingLength = 16 - (data.length % 16);
    const padding = new Uint8Array(paddingLength).fill(paddingLength);
    return new Uint8Array([...data, ...padding]);
}

function unpad(data) {
    const paddingLength = data[data.length - 1];
    return data.slice(0, data.length - paddingLength);
}

function encrypt(rawText) {
    const plaintext = new TextEncoder().encode(rawText);
    const paddedPlaintext = pad(plaintext);
    const encrypted = aesCbcEncrypt(key, iv, paddedPlaintext);
    return uint8ArrayToHex(encrypted);
}

function decrypt(hexCiphertext) {
    const ciphertext = hexToUint8Array(hexCiphertext);
    const decrypted = aesCbcDecrypt(key, iv, ciphertext);
    const unpadded = unpad(decrypted);
    return new TextDecoder().decode(unpadded);
}

export {
    encrypt, decrypt, hexToUint8Array, uint8ArrayToHex
}